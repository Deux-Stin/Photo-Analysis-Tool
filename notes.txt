HYPER IMPORTANT pour éviter des problèmes d'incompatibilité :

conda activate photo_analysis_env




Installation :
Graphviz : windows_10_cmake_Release_graphviz-install-12.0.0-win64.exe ajouter la variable d'environnement à "path"

# Installer Pyreverse (inclus avec pylint)
pip install pylint

pip install --upgrade pylint astroid


#Lister les dépendances d'un projet : 
pip freeze > requirements.txt

#Télécharger toutes les dépendances : 
pip install -r requirements.txt


------------------------------------------------------------------------------------------------------------------

Créer un repo git :

Résumé des Commandes
Initialiser le repository : git init


Ajouter des fichiers : git add .

Committer les fichiers : git commit -m "Initial commit"

Ajouter le remote : git remote add origin https://github.com/Deux-Stin/Photo-Analysis-Tool.git

Pusher vers GitHub : git push -u origin master

En suivant ces étapes, vous aurez créé un repository Git local pour votre projet, l'aurez lié à un repository sur GitHub et aurez poussé vos fichiers vers GitHub en utilisant TortoiseGit.


------------------------------------------------------------------------------------------------------------------

### Résumé des Fonctionnalités du Programme

Votre programme est une application web basée sur Flask et Dash qui permet de gérer des photos en extrayant leurs métadonnées EXIF et en les stockant dans une base de données SQLite. Voici les principales fonctionnalités :

1. **Téléchargement et extraction de fichiers ZIP :**
   - L'utilisateur peut téléverser un fichier ZIP contenant des images.
   - Le fichier ZIP est extrait dans un répertoire spécifique.

2. **Extraction de métadonnées EXIF :**
   - Les métadonnées EXIF (date, longueur focale, ouverture, vitesse d'obturation, heure de prise de vue) sont extraites des images.

3. **Stockage dans une base de données SQLite :**
   - Les métadonnées extraites sont stockées dans une base de données SQLite.
   - La structure de la base de données est initialisée si elle n'existe pas, et modifiée si nécessaire.

4. **Affichage des photos stockées :**
   - Les photos et leurs métadonnées stockées dans la base de données peuvent être affichées sur une page web.

5. **Gestion des extensions de fichiers RAW :**
   - Le programme gère une liste d'extensions de fichiers RAW prédéfinie pour filtrer les fichiers à traiter.

### Idées d'Amélioration

1. **Interface Utilisateur Améliorée :**
   - **Interface utilisateur intuitive :** Améliorer le design de l'interface pour une meilleure expérience utilisateur.
   - **Affichage des photos :** Ajouter une galerie d'images pour visualiser les photos directement dans l'application.

2. **Support Étendu pour les Fichiers RAW :**
   - **Support pour plus d'extensions :** Ajouter des extensions supplémentaires pour les fichiers RAW courants.
   - **Conversion des fichiers RAW :** Intégrer une fonctionnalité pour convertir les fichiers RAW en JPEG ou PNG pour une visualisation plus facile.

3. **Analyse et Visualisation des Données :**
   - **Statistiques et graphiques :** Ajouter des statistiques sur les photos (par exemple, histogrammes des dates de prise de vue, graphiques des longueurs focales).
   - **Cartes de localisation :** Si les données de localisation sont disponibles, afficher les emplacements de prise de vue sur une carte interactive.

4. **Amélioration de la Gestion des Fichiers :**
   - **Téléversement de plusieurs fichiers ZIP :** Permettre le téléversement et le traitement simultané de plusieurs fichiers ZIP.
   - **Suppression et mise à jour des photos :** Ajouter des fonctionnalités pour supprimer ou mettre à jour les photos et leurs métadonnées dans la base de données.

5. **Sécurité et Authentification :**
   - **Authentification des utilisateurs :** Ajouter un système d'authentification pour restreindre l'accès aux fonctionnalités de gestion des photos.
   - **Permissions utilisateurs :** Mettre en place des permissions pour différents utilisateurs (par exemple, admin, utilisateur régulier).

6. **Optimisation des Performances :**
   - **Traitement en arrière-plan :** Utiliser des tâches en arrière-plan pour traiter les fichiers ZIP et extraire les métadonnées pour ne pas bloquer l'interface utilisateur.
   - **Cache des résultats :** Implémenter un cache pour stocker temporairement les résultats des requêtes fréquentes à la base de données.

7. **Documentation et Support :**
   - **Documentation utilisateur :** Créer une documentation utilisateur détaillant comment utiliser l'application.
   - **Support multi-langues :** Ajouter un support pour plusieurs langues pour rendre l'application accessible à un public plus large.

8. **Sauvegarde et Restauration :**
   - **Sauvegarde de la base de données :** Ajouter une fonctionnalité pour sauvegarder la base de données SQLite.
   - **Restauration de la base de données :** Permettre la restauration de la base de données à partir d'un fichier de sauvegarde.

Ces améliorations peuvent rendre votre application plus robuste, conviviale, et fonctionnelle pour les utilisateurs finaux.
